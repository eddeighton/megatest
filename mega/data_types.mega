

object DataTypes
{
    include( < iostream > );

    // all types defined in native_types.hpp
    component Integers
    {
        dim m_U16       U16;
        dim m_I16       I16;
        dim m_U32       U32;
        dim m_I32       I32;
        dim m_U64       U64;
        dim m_I64       I64;
        dim m_F32       F32;
        dim m_F64       F64;
        dim m_TimeStamp mega::runtime::TimeStamp;

        function test()->void
        {
            LOG( Info, "Integers test" );
        }
    }

    component References
    {
        function test()->void
        {
            LOG( Info, "References test" );
        }
    }

    component STL
    {
        dim m_string     std::string;
        dim m_vector_I32 std::vector< I32 >;

        function test()->void
        {
            LOG( Info, "STL test" );
        }
    }

    component Maths
    {
        // math types
        dim m_F2   F2;
        dim m_F3   F3;
        dim m_F4   F4;
        dim m_Quat Quat;
        dim m_F33  F33;

        // maths
        function test()->void
        {
            LOG( Info, "MathBasic" );
            using namespace qvm;

            F3 v1{ 1, 2, 3 };
            F3 v2{ 1, 0, 2 };

            F3 v3 = v1 + v2;
            m_F3( v3 );

            LOG( Info, m_F3() );

            v3 *= 2;
            m_F3( v3 );
            LOG( Info, m_F3() );

            normalize( v3 );
            LOG( Info, v3 );

            v3 += v3;
            LOG( Info, v3 );

            v3 *= 3;
            LOG( Info, v3 );

            v3 += F3{ 3, 3, 3 };
            LOG( Info, v3 );

            float f = qvm::dot( v1, v3 );
            LOG( Info, f );

            F3 v4 = qvm::cross( v1, v3 );
            LOG( Info, v4 );
        }
    }
}
