

/*

link Identifier[ min:max ] <<->> Target;

Link specifies min and max cardinality of how it relates to relation row.

So the minimum is either 0 or 1 meaning for all instances of the link there
exists a minimum of zero to one entries in the relation.

Similarly the maximum specifies how there exists a maximum number of occurrences
of the link in the relation.

In the Socket -> Plug example.  The socket is 0:1.  This means that any object that
inherits the link MUST occur a minimum of zero times and at most once in the relation.

So essentially the Socket link is optional but singular.  This can be the default.

If the Plug on the other hand was 1:* then any instance of Plug MUST ALWAYS be related
to a Socket atleast once and at most many times.

So Plug is mandatory and non-singular so it returns a range.

*/

link Socket [0:1] < Plug;
link Plug [1:*] > Socket;



object Cube3
{
    link Plug : Socket;

    link Socket2[0:1] - Cube5::Plug2;

    dim int m_value;
}

object Cube5
{
    link Socket : Plug;

    link Plug2[1:*] - Cube3::Socket2;

    dim int m_value;
}

/*
object FloorSocket
{
    link AuxSystem : Socket;

    function test : void
    {
        // FloorSocket IS a socket and can access the
        // range of plugs
        for( auto plug : AuxSystem.Range() )
        {

        }
    }
}

object AuxSystem
{
    link FloorSocket : Plug;

    function test : void
    {
        // so AuxSystem IS a plug.
        // so it can access the optional singular Socket
        auto socket = FloorSocket();
    }

}


object Cube3
{
    dependency( square.mega );

    dim int m_value;

    // foobar : 16
    function foobar() : int
    {
        return m_value();
    }

    //link l_Square[ 0:1 ] - test::Square;

}
*/
