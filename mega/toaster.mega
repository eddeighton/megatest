
interface Spread
{
    event SuperTasty;
}

object Butter : Spread
{
}

object PeanutButter : Butter
{
}

object Marmite : Spread
{
    interupt( Owner.SliceExplosion );

    //interupt( Owner.Slice.Owner.Toaster.StartToasting );
}

object Slice
{
    include( mega/values/runtime/reference_io.hpp );

    dependency( meta.mega );

    owns Spread;

    dim float m_toastedness = 0.1f;

    event SliceExplosion;

    interupt( Owner.StartToasting );
    interupt( Owner.Toaster.StartToasting );
}

object WhiteSlice : Slice
{
}

object BrownSlice : Slice
{
}

object Toaster
{
    dependency( meta.mega );
    
    dim std::string m_version;

    component Slot : OR
    {
        owns Slice;

        interupt test( Slice.Spread.SuperTasty );

        dim I32 m_timer;
        dim I32 m_toastingTime;
        dim I32 m_toastingRate;

        decider( ToastingComplete, Idle )
        {
            return ToastingComplete::ID;
        }

        function testFnc() : void
        {
            LOG( Info, "test" );
        }

        event StartToasting;
        event StopToasting;

        action Idle : OR
        {
            interupt( StartToasting ) > Toasting
            {
                m_timer( 0 );
            }

            decider( DoNothing )
            {
                return DoNothing::ID;
            }

            action DoNothing
            {

            }

            action StartToastingA > Toasting
            {
                co_return mega::complete();
            }

            if( m_timer() == 0 )
            {
                m_timer( 1 );
                LOG( Info, "Idle " );
            }
        }

        action Toasting > ToastingComplete, Idle
        {
            interupt( StopToasting ) > Idle
            {
                LOG( Info, "StopToasting" );
            }

            if( m_timer() == 0 || m_timer() == 1 )
            {
                LOG( Info, "Toasting Started" );
                m_timer( 2 );
            }
            else
            {
                m_timer( m_timer() + 1 );
            }

            if( m_timer() > m_toastingTime() )
            {
                co_return mega::complete();
            }
        }

        action ToastingComplete > Idle
        {
            LOG( Info, "ToastingComplete" );
            m_timer( 0 );
            co_return mega::complete();
        }
    }
}

object TestObject
{

}
