

object Slice
{
    dependency( meta.mega );

    dim bool  m_bIsBrownBread;
    dim float m_toastedness = 0.0f;

    component Toastable : OR
    {
        decider( Toasting, Toasted ) : bool
        {
            return true;
        }
        decider( PatternBurn ) : bool
        {
            return true;
        }
        decider( Complete ) : bool
        {
            return true;
        }

        dim float m_toastedness;

        state Toasted : OR
        {
            action PatternBurn > Complete
            {

            }

            action Complete
            {

            }
        }

        action Toasting > Toasted
        {
        }

        action Idle > Toasting, Toasted
        {
        }
    }

}

object Toaster
{
    dependency( meta.mega );
    
    dim std::string m_version;

    component Power : OR
    {
        action D > E
        {
        }
        action E
        {
        }
        action F : OR
        {
            action G > H
            {
            }
            action H > D
            {
            }
        }
    }

    component Slot[ 4 ]
    {
        part( One, Two, Three, Four );

        owns Slice;

        component ToastingSystem : OR
        {
            dim float m_temp;

            action Toasting
            {
                //requirement( Slice.Toastable );

            }

            state Idle[ 2 ]
            {
                action Thing : OR
                {
                    action A
                    {
                    }

                    action B
                    {
                    }
                }

                action C > Toasting
                {
                }
            }
        }
    }
}
