
namespace Utilities
{
    cpp TestCPPAlias int;

    interface UsefulFunctions
    {
        function TestFunction( TestCPPAlias value ) -> void;
    }
}

object Spread
{
    event SuperTasty;
}

object Butter : ^Spread
{
    component SpreadStuff : ^Utilities.UsefulFunctions
    {
        cpp TestCPPAlias float;
    }
}

object PeanutButter : ^Butter
{
    cpp SpreadStuff::TestCPPAlias double;
}

object Marmite : ^Spread
{
    // interupt( @Slice.SliceExplosion );
}

object Jam : ^Spread
{
    // interupt( @Slice.SliceExplosion );
}

object Honey : ^Spread
{
    // interupt( @Slice.SliceExplosion );
}

object Slice
{
    owns Spread ^ Spread;

    dim m_toastedness float = 0.1f;

    event SliceExplosion;

    // interupt( @Owner.StartToasting );
    // interupt( @Owner.Toaster.StartToasting );
    component SliceComponent
    {
        event SliceEvent;
    }
    component CrumblesComponent
    {
        event CrumbleEvent;
    }
}

object WhiteSlice : ^Slice
{
}

object BrownSlice : ^Slice
{
}

object Toaster
{
    dim m_version std::string;

    component Slot : ^OR 
    {
        owns Slice ^ Slice;

        interupt( @Slice.Spread.SuperTasty );

        dim m_timer        I32;
        dim m_toastingTime I32;
        dim m_toastingRate I32;

        decider( @ToastingComplete, @Idle );

        function testFnc()->void;

        event StartToasting;
        event StopToasting;

        action Idle : ^OR
        {
            interupt( @StartToasting ) > @Toasting;

            decider( @DoNothing, @DoNothing2, @StartToastingA );

            action DoNothing;
            action DoNothing2;
            action StartToastingA > @Toasting;
        }

        action Toasting > @ToastingComplete, @Idle;

        action ToastingComplete > @Idle;
    }
}
