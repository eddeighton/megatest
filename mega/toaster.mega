

object Slice
{
    dim bool  m_bIsBrownBread;
    dim float m_toastedness = 0.0f;

    component Toastable
    {
        //alias ToastingSystem = Owner.ToastingSystem;

        dim float m_toastedness;

        action Toasted
        {
        }

        action Toasting > Toasted
        {
            //requirement( ToastingSystem );
        }

        action Idle > Toasting
        {
        }
    }

}
/*
object Tool : Slice
{
    component UseByDateChip
    {
        action Idle
        {
        }
        action SendDate
        {
        }
    }
}*/

object Toaster
{
    dim std::string m_version;

    component Slot[ 4 ]
    {
        part( One, Two, Three, Four );

        owns Slice;

        component ToastingSystem
        {
            dim float m_temp;

            action Toasting
            {
                requirement( Slice.Toastable );

                /*link toastedness = Toastable.m_toastedness;

                if( toastedness() < 1.0 )
                {
                    toastedness( toastedness() + m_temp() );
                }*/


            }
            action Idle
            {
            }
        }

        component UseByDataReader
        {
            // link UseByDateChip;
        }
    }

    event PowerOn;
    event PowerOff;
    event Reset;

    action Off > On
    {
        interupt( PowerOn ) > On.Off;
    }

    action On > Off
    {
    }
}
