
object Brick
{
    dependency( meta.mega );
    
    include( <sstream> );
    include( mega/macros.hpp );

    owns OwnedBricks = Brick [0:*];

    component Plug
    {
        link AttachedSocket = Brick.Socket;

        component SubSystem1[ 3 ]
        {
            state Sub1
            {
                action A1
                {
                    requirement( Socket.Idle );
                }

                action A2
                {
                }
            }
        }
    }

    component Socket : OR
    {
        link AttachedPlug = Brick.Plug;

        action Idle
        {
        }

        action DoStuff
        {
        }
    }

    function connect( Brick brick )
        : void
    {
        OwnedBricks( brick );
        Socket.AttachedPlug( brick.Plug.GET() );
    }

    function testRefParam( Brick brick ) : Brick::Socket 
    {
        return brick.Socket.GET();
    }

    function test( Brick brick ) : int
    {
        //LOG( Info, "From test: " << i );
        return 123;
    }

    function print( int indent ) : void
    {
        std::ostringstream os;
        for( int i = 0; i != indent; ++i )
            os << ' ';
        if( Socket.AttachedPlug() )
        {
            os << getName() << " -> " << Socket.AttachedPlug.getName();
        }
        else
        {
            os << getName();
        }
        LOG( Info, os.str() );
        for( auto b : OwnedBricks() )
        {
            b.print( indent + 2 );
        }
    }

    function getName() : std::string
    {
        return "Brick";
    }
}

object SmallBrick : Brick
{
    function getName() : std::string
    {
        return "SmallBrick";
    }
}

object LargeBrick : Brick
{
    function getName() : std::string
    {
        return "LargeBrick";
    }
}